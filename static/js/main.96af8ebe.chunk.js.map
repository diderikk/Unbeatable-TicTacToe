{"version":3,"sources":["minimax.js","index.js"],"names":["findWinner","board","i","emptySpaces","count","length","minimax","depth","isMaximizer","dataObj","player","winner","maxEval","Infinity","temp","slice","evaluation","bestMoves","push","index","randomInt","Math","floor","random","splice","minEval","minimaxPruned","alpha","beta","counter","max","min","require","MoveList","props","className","map","obj","Square","onClick","value","Buttons","id","buttonPlayerHandle","buttonFirstHandle","playFirst","buttonPlayAgainHandle","Board","state","Array","fill","renderSquare","bind","minmaxHandle","handleButton","this","setState","c","Object","assign","status","gamesCalculated","gamesCalculatedPruned","handlePlayButton","handlePlayAgainButton","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96af8ebe.chunk.js","sourcesContent":["export {findWinner, emptySpaces, minimax, minimaxPruned}\n\nfunction findWinner(board){\n    //Rows and columns\n    \n    for(let i = 0; i<3; i++){\n        if((board[i] === board[i+3] && board[i] === board[i+6]) && board[i]){return board[i];}\n        if((board[(i*3)] === board[(i*3)+1] && board[(i*3)] === board[(i*3)+2]) && board[i*3])return board[i*3];\n    }\n    //Diagonals\n    if((board[0] === board[4] && board[0] === board[8]) && board[0]) return board[0];\n    if((board[2] === board[4] && board[2] === board[6]) && board[2]) return board[2];\n\n    return null;\n}\n\nfunction emptySpaces(board){\n    let count = 0; \n    for(let i = 0; i<board.length; i++){\n        if(!board[i]) count++;\n    }\n    return count;\n}\n\nfunction minimax(board, depth, isMaximizer, dataObj, player){\n    let winner = findWinner(board);\n    let emptySpacesVar = emptySpaces(board);\n\n    if(emptySpacesVar === 0 || winner){\n        dataObj.count++;\n        \n        if(winner === player){\n            return -10 + depth;\n        }\n        else if(winner){\n            return 10 - depth;\n        }\n        else{\n            return 0;\n        }\n\n    }\n\n    if(isMaximizer){\n        let maxEval = -Infinity;\n        for(let i = 0; i<board.length; i++){\n            if(board[i]) continue;\n            let temp = board.slice();\n            temp[i] = (player === 'X')?'O':'X';\n            let evaluation = minimax(temp, depth+1, false, dataObj, player);\n            if(evaluation === maxEval && depth === 0){\n                dataObj.bestMoves.push({\n                    index: i,\n                    evaluation: evaluation\n                });\n            }\n            if(evaluation > maxEval){\n                maxEval = evaluation;\n                if(depth === 0){\n                    dataObj.bestMoves = [];\n                    dataObj.bestMoves.push({\n                        index: i,\n                        evaluation: evaluation\n                    });\n                }\n            }\n        }\n        if(depth === 0) {\n            let randomInt = Math.floor(Math.random() * dataObj.bestMoves.length);\n            let indexObj = dataObj.bestMoves.splice(randomInt,1);\n            return indexObj[0].index;\n        };\n        return maxEval;\n    }\n    else{\n        let minEval = Infinity;\n        for(let i = 0; i<board.length; i++){\n            if(board[i]) continue;\n            let temp = board.slice();\n            temp[i] = (player === 'X')?'X':'O';\n            let evaluation = minimax(temp, depth+1, true, dataObj, player);\n            if(evaluation < minEval){\n                minEval = evaluation;\n            }\n        }\n        return minEval;\n    }\n}\n\nfunction minimaxPruned(board, depth, alpha, beta, isMaximizer, counter, player){\n    let winner = findWinner(board);\n    let emptySpacesVar = emptySpaces(board);\n\n    if(emptySpacesVar === 0 || winner){\n        counter.count++;\n        \n        if(winner === player){\n            return -10 + depth;\n        }\n        else if(winner){\n            return 10 - depth;\n        }\n        else{\n            return 0;\n        }\n\n    }\n\n    if(isMaximizer){\n        let maxEval = -Infinity;\n        for(let i = 0; i<board.length; i++){\n            if(board[i]) continue;\n            let temp = board.slice();\n            temp[i] = (player === 'X')?'O':'X';\n            let evaluation = minimaxPruned(temp, depth+1, alpha, beta, false, counter, player);\n            if(evaluation === maxEval && depth === 0){\n                counter.bestMoves.push({\n                    index: i,\n                    evaluation: evaluation\n                });\n            }\n            if(evaluation > maxEval){\n                maxEval = evaluation;\n                if(depth === 0){\n                    counter.bestMoves = [];\n                    counter.bestMoves.push({\n                        index: i,\n                        evaluation: evaluation\n                    });\n                }\n            }\n            alpha = Math.max(alpha, evaluation);\n            if(beta <= alpha) break;\n        }\n        return maxEval;\n    }\n    else{\n        let minEval = Infinity;\n        for(let i = 0; i<board.length; i++){\n            if(board[i]) continue;\n            let temp = board.slice();\n            temp[i] = (player === 'X')?'X':'O';\n            let evaluation = minimaxPruned(temp, depth+1, alpha, beta, true, counter, player);\n            if(evaluation < minEval){\n                minEval = evaluation;\n            }\n            beta = Math.min(beta, evaluation)\n            if(beta <= alpha) break;\n        }\n        return minEval;\n    }\n}","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst minimax = require('./minimax');\n\nconst dataObj = {\n    count: 0,\n    bestMoves: []\n};\n\nconst MoveList = (props) => {\n    return (\n        <div className=\"moveList\">\n            <p>Other moves {'({Index:Evaluation})'}: </p>\n            <ul>\n                {dataObj.bestMoves.map(obj => \n                <li key={obj.index}>\n                    {`{${obj.index}: ${obj.evaluation}}, `}\n                </li>)}\n            </ul>\n        </div>\n    )\n}\n\n\nconst Square = (props) => {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nconst Buttons = (props) => {\n        return (\n            <div className=\"selectPlay\">\n                <button id=\"switchType\" onClick={props.buttonPlayerHandle}>\n                    Switch to: {(props.player === 'X')?'O':'X'}\n                </button>\n                <button onClick={props.buttonFirstHandle}>\n                    {(props.playFirst)?'Play Second':'Play First'}\n                </button>\n                <button onClick={props.buttonPlayAgainHandle}>\n                    Play Again\n                </button>\n            </div>\n        )\n}\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            board: Array(9).fill(null),\n            player: 'X',\n            playFirst: false,\n            counter: {\n                count: 0,\n                bestMoves: []\n            }\n        }\n\n        this.renderSquare = this.renderSquare.bind(this);\n        this.minmaxHandle = this.minmaxHandle.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n    }\n\n    handleButton(){\n        this.setState({\n            player: (this.state.player === 'X')?'O':'X',\n            board: Array(9).fill(null),\n            counter: {\n                count: 0\n            }\n        });\n        dataObj.count = 0; \n    }\n\n    handlePlayButton(){\n        this.setState({\n            playFirst: !this.state.playFirst,\n            board: Array(9).fill(null),\n            counter: {\n                count: 0\n            }\n        });\n        dataObj.count = 0;\n    }\n\n    handlePlayAgainButton(){\n        this.setState({\n            board: Array(9).fill(null),\n            counter: {\n                count: 0\n            }\n        });\n        dataObj.count = 0;\n    }\n\n    minmaxHandle(i){\n        dataObj.count = 0;\n        this.setState((state) => {\n            let c = Object.assign({},state.counter);\n            c.count = 0;\n            return {c};\n        })\n        let temp = this.state.board.slice();\n        if(minimax.findWinner(temp) || temp[i]){\n            return;\n        }\n        temp[i] = this.state.player;\n        let index = minimax.minimax(temp,0,true,dataObj,this.state.player);\n        minimax.minimaxPruned(temp,0,-Infinity, Infinity,true,this.state.counter,this.state.player)\n        if(minimax.emptySpaces(temp) !== 0){\n            temp[index] = (this.state.player === 'X')?'O':'X';\n        }\n        this.setState({\n            board: temp\n        });\n    }\n\n    renderSquare(i){\n        return (    \n            <Square value={this.state.board[i]} \n            onClick={() => this.minmaxHandle(i)\n            } />\n        )\n    }\n    \n    render() {  \n        let winner = minimax.findWinner(this.state.board);\n        let status = <h2>Next move: <h1>{(this.state.player === 'X')?\"X\":\"O\"}</h1></h2>;\n        if(winner) status = <h2>Winner: <h1>{winner}</h1></h2>;\n        else if(minimax.emptySpaces(this.state.board) === 0) status = <h1>Stalemate</h1>;\n\n        let gamesCalculated = <p>Games computed: {dataObj.count}</p>\n        let gamesCalculatedPruned = <p>Games computed (optimized): {this.state.counter.count}</p>\n\n        if(!this.state.playFirst && minimax.emptySpaces(this.state.board) === 9){\n            let temp = this.state.board.slice();\n            let index = minimax.minimax(temp,0,true,dataObj,this.state.player);\n            minimax.minimaxPruned(temp,0,-Infinity, Infinity,true,this.state.counter,this.state.player)\n            temp[index] = (this.state.player === 'X')?'O':'X';\n            this.setState({\n                board: temp\n            });\n        }\n\n        return(\n            <div className=\"container\">\n                <Buttons \n                    player={this.state.player} \n                    playFirst={this.state.playFirst}\n                    buttonPlayerHandle={() => this.handleButton()} \n                    buttonFirstHandle={() => this.handlePlayButton()}\n                    buttonPlayAgainHandle={() => this.handlePlayAgainButton()}\n                    />\n                <div className=\"board\">\n                    <div className=\"status\">{status}</div>\n                    <div className=\"row\">\n                        {this.renderSquare(0)}\n                        {this.renderSquare(1)}\n                        {this.renderSquare(2)}\n                    </div>\n                    <div className=\"row\">\n                        {this.renderSquare(3)}\n                        {this.renderSquare(4)}\n                        {this.renderSquare(5)}\n                    </div>\n                    <div className=\"row\">\n                        {this.renderSquare(6)}\n                        {this.renderSquare(7)}\n                        {this.renderSquare(8)}\n                    </div>\n                    <footer>\n                        <hr />\n                        <div className=\"footerContainer\">\n                            <div className=\"gc\">\n                                <div id='gc1'>{gamesCalculated}</div>\n                                <div id='gc2'>{gamesCalculatedPruned}</div>\n                            </div>\n                            <MoveList />\n                        </div>\n                    </footer>\n                </div>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}